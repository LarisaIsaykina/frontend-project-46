Плоский формат
Часто утилиты предоставляют вывод результата своих действий в разных форматах. Это бывает нужно при интеграции с другими системами или просто для удобства восприятия. Диф между файлами тоже можно отображать разными способами.

Текст отражает ситуацию, словно мы объединили второй объект с первым:

gendiff --format plain filepath1.json filepath2.json

Property 'common.follow' was added with value: false
Property 'common.setting2' was removed
Property 'common.setting3' was updated. From true to null
Property 'common.setting4' was added with value: 'blah blah'
Property 'common.setting5' was added with value: [complex value]
Property 'common.setting6.doge.wow' was updated. From '' to 'so much'
Property 'common.setting6.ops' was added with value: 'vops'
Property 'group1.baz' was updated. From 'bas' to 'bars'
Property 'group1.nest' was updated. From [complex value] to 'str'
Property 'group2' was removed
Property 'group3' was added with value: [complex value]
Если новое значение свойства является составным, то пишется [complex value]
Если свойство вложенное, то отображается весь путь до корня, а не только с учетом родителя, например выше это: common.setting6.ops.
Ссылки
Паттерн: Фабрика
Интерфейсы модулей
Задача
Напишите тесты.
Реализуйте форматер plain.
Реализуйте возможность выбора формата plain. Функция сравнения должна иметь параметр, выбирающий вид представления результата.

import genDiff from '@hexlet/code';

const diff = genDiff(filepath1, filepath2, formatName);
console.log(diff);
Вынесите форматеры в директорию formatters, так чтобы каждый форматер лежал в своём собственном модуле. Выбор форматеров реализуйте в файле formatters/index.js.

Добавьте в ридми аскинему с примером работы пакета.

